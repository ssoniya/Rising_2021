{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Ex3_Demo_MultilabelClassification","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNX7HclvPcW3ZahFKad06OW"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"IWWjmdqxEvor"},"source":["# MULTILABEL CLASSIFICATION"]},{"cell_type":"markdown","metadata":{"id":"E2LPQ9vOCLHv"},"source":["# Demo\n"]},{"cell_type":"markdown","metadata":{"id":"UnYiy9440FqP"},"source":["## Problem Statement\n","**Description :** Multilabel Classification\n","\n","**Learnings :** Create basic Sequential Model\n","              + train from scratch\n","\n","**Demo :** Classify created dataset into more than 1 categories- AbdomenCT, BreastMRI, ChestCT, Abnormal\n","\n","      Input:- Xray Image\n","\n","      Output:- array with 4 values\n","\n","**Dataset :** Dataset Created from Ex1 & Ex2\n","           link - https://www.kaggle.com/paultimothymooney/chest-xray-pneumonia\n","            https://www.kaggle.com/andrewmvd/medical-mnist\n"]},{"cell_type":"markdown","metadata":{"id":"IMD9_tSACOHH"},"source":["# House Keeping\n"]},{"cell_type":"code","metadata":{"id":"dzTrlvWVz3MN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621249204810,"user_tz":-330,"elapsed":21010,"user":{"displayName":"soniya singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiHK9orVGbsmNdyI5ADxiQAZQZ0U72EPVWs-RIt=s64","userId":"00658095523118481946"}},"outputId":"822fc0af-77a9-41ed-ab7a-8537ecd7ebd8"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"-lRx21ErwcMS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621249715883,"user_tz":-330,"elapsed":1056,"user":{"displayName":"soniya singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiHK9orVGbsmNdyI5ADxiQAZQZ0U72EPVWs-RIt=s64","userId":"00658095523118481946"}},"outputId":"38285c27-5075-4538-ad14-e3c222dc1934"},"source":["# IMPORT LIBRARIES\n","# IMPORT LIBRARIES\n","import os\n","import numpy as np\n","import pandas as pd\n","\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout, Flatten\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.preprocessing import image\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","from tqdm import tqdm\n","\n","root_path = '/content/gdrive/MyDrive/Colab Notebooks/Rising_2021'\n","os.chdir(root_path)\n","cwd_path = os.getcwd()\n","\n","# DEFINE TRAIN-VAL-TEST DATA DIRECTORIES\n","input_path = os.path.join(root_path, \"datasets\", \"multilabel_dataset\")\n","train_path = os.path.join(input_path, \"train\")\n","val_path = os.path.join(input_path, \"val\")\n","test_path = os.path.join(input_path, \"test\")\n","\n","print(train_path)\n","print(val_path)\n","print(test_path)\n","print(root_path)\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content/gdrive/MyDrive/Colab Notebooks/Rising_2021/datasets/multilabel_dataset/train\n","/content/gdrive/MyDrive/Colab Notebooks/Rising_2021/datasets/multilabel_dataset/val\n","/content/gdrive/MyDrive/Colab Notebooks/Rising_2021/datasets/multilabel_dataset/test\n","/content/gdrive/MyDrive/Colab Notebooks/Rising_2021\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xU3l8sU_0xiR"},"source":["# DEFINE PARAMETERS\n","BATCH_SIZE = 16\n","IMG_HEIGHT = 128\n","IMG_WIDTH = 128\n","NEPOCHS = 8\n","NLABELS = 4\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pdqRthr-oo5M"},"source":["# Data Processing\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fMTKSjm601ZM","executionInfo":{"status":"ok","timestamp":1621250087144,"user_tz":-330,"elapsed":89204,"user":{"displayName":"soniya singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiHK9orVGbsmNdyI5ADxiQAZQZ0U72EPVWs-RIt=s64","userId":"00658095523118481946"}},"outputId":"bab0d76c-47e6-401a-97f4-5b1e6a717177"},"source":["# PREPARE TRAIN TEST VAL DATA\n","train = pd.read_csv(os.path.join(train_path, 'train_labels.csv'))\n","test = pd.read_csv(os.path.join(test_path, 'test_labels.csv'))\n","val = pd.read_csv(os.path.join(val_path, 'val_labels.csv'))\n","\n","train_image = []\n","for i in tqdm(range(train.shape[0])):\n","  img = image.load_img(os.path.join(train_path, train['Image'][i]), target_size=(IMG_WIDTH, IMG_HEIGHT, 3))\n","  img = image.img_to_array(img)\n","  img = img/255\n","  train_image.append(img)\n","train_X = np.array(train_image)\n","train_Y = np.array(train.drop(['Image'], axis=1))\n","print(\"Train Samples- Input shape:\", train_X.shape, \"Labels shape:\", train_Y.shape)\n","\n","test_image = []\n","for i in tqdm(range(test.shape[0])):\n","    img = image.load_img(os.path.join(test_path, test['Image'][i]), target_size=(IMG_WIDTH, IMG_HEIGHT, 3))\n","    img = image.img_to_array(img)\n","    img = img/255\n","    test_image.append(img)\n","test_X = np.array(test_image)\n","test_Y = np.array(test.drop(['Image'], axis=1))\n","print(\"Test Samples- Input shape:\", test_X.shape, \"Labels shape:\", test_Y.shape)\n","\n","val_image = []\n","for i in tqdm(range(val.shape[0])):\n","    img = image.load_img(os.path.join(val_path, val['Image'][i]), target_size=(IMG_WIDTH, IMG_HEIGHT, 3))\n","    img = image.img_to_array(img)\n","    img = img/255\n","    val_image.append(img)\n","val_X = np.array(val_image)\n","val_Y = np.array(val.drop(['Image'], axis=1))\n","print(\"Val Samples- Input shape:\", val_X.shape, \"Labels shape:\", val_Y.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["100%|██████████| 300/300 [01:04<00:00,  4.69it/s]\n","  0%|          | 0/60 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Train Samples- Input shape: (300, 128, 128, 3) Labels shape: (300, 4)\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████| 60/60 [00:15<00:00,  3.87it/s]\n","  0%|          | 0/36 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Test Samples- Input shape: (60, 128, 128, 3) Labels shape: (60, 4)\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████| 36/36 [00:08<00:00,  4.48it/s]"],"name":"stderr"},{"output_type":"stream","text":["Val Samples- Input shape: (36, 128, 128, 3) Labels shape: (36, 4)\n"],"name":"stdout"},{"output_type":"stream","text":["\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"FiA8LNp8os1X"},"source":["# Implement Model\n"]},{"cell_type":"code","metadata":{"id":"QSuEYZ1K092O"},"source":["# DEFINE MODEL\n","def get_model():\n","    model = Sequential()\n","    model.add(Conv2D(filters=16, kernel_size=(5, 5), activation=\"relu\", input_shape=(IMG_WIDTH, IMG_HEIGHT,3)))\n","    model.add(MaxPooling2D(pool_size=(2, 2)))\n","    model.add(Dropout(0.25))\n","    model.add(Conv2D(filters=32, kernel_size=(5, 5), activation='relu'))\n","    model.add(MaxPooling2D(pool_size=(2, 2)))\n","    model.add(Dropout(0.25))\n","    model.add(Conv2D(filters=64, kernel_size=(5, 5), activation=\"relu\"))\n","    model.add(MaxPooling2D(pool_size=(2, 2)))\n","    model.add(Conv2D(filters=64, kernel_size=(5, 5), activation='relu'))\n","    model.add(MaxPooling2D(pool_size=(2, 2)))\n","    model.add(Flatten())\n","    model.add(Dense(128, activation='relu'))\n","    model.add(Dense(64, activation='relu'))\n","    model.add(Dense(NLABELS, activation='sigmoid'))\n","    return model\n","\n","model = get_model()\n","model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7J_lOVaW_-z2"},"source":["## Train Model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LrJxC7uD0_jm","executionInfo":{"status":"ok","timestamp":1621250191493,"user_tz":-330,"elapsed":65608,"user":{"displayName":"soniya singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiHK9orVGbsmNdyI5ADxiQAZQZ0U72EPVWs-RIt=s64","userId":"00658095523118481946"}},"outputId":"8c9bae3a-b9f0-494e-abcf-6e028f747210"},"source":["H = model.fit(train_X, train_Y, epochs=NEPOCHS, validation_data=(val_X, val_Y),\n","              batch_size=BATCH_SIZE)\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/8\n","19/19 [==============================] - 9s 429ms/step - loss: 0.5583 - accuracy: 0.6049 - val_loss: 0.5247 - val_accuracy: 0.7222\n","Epoch 2/8\n","19/19 [==============================] - 8s 417ms/step - loss: 0.3799 - accuracy: 0.8397 - val_loss: 0.3024 - val_accuracy: 0.9722\n","Epoch 3/8\n","19/19 [==============================] - 8s 415ms/step - loss: 0.2068 - accuracy: 0.9333 - val_loss: 0.2290 - val_accuracy: 0.9722\n","Epoch 4/8\n","19/19 [==============================] - 8s 414ms/step - loss: 0.2394 - accuracy: 0.8982 - val_loss: 0.1578 - val_accuracy: 1.0000\n","Epoch 5/8\n","19/19 [==============================] - 8s 413ms/step - loss: 0.1399 - accuracy: 0.9787 - val_loss: 0.1255 - val_accuracy: 1.0000\n","Epoch 6/8\n","19/19 [==============================] - 8s 413ms/step - loss: 0.0854 - accuracy: 0.9921 - val_loss: 0.0630 - val_accuracy: 1.0000\n","Epoch 7/8\n","19/19 [==============================] - 8s 413ms/step - loss: 0.0768 - accuracy: 1.0000 - val_loss: 0.0637 - val_accuracy: 1.0000\n","Epoch 8/8\n","19/19 [==============================] - 8s 413ms/step - loss: 0.0555 - accuracy: 0.9889 - val_loss: 0.0753 - val_accuracy: 1.0000\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"b7SvJk-sH0_6"},"source":["## Training Plots\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"FhU3L36T1L1f","executionInfo":{"status":"ok","timestamp":1621250210589,"user_tz":-330,"elapsed":1097,"user":{"displayName":"soniya singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiHK9orVGbsmNdyI5ADxiQAZQZ0U72EPVWs-RIt=s64","userId":"00658095523118481946"}},"outputId":"0a76a85d-e235-4a35-a5ed-a38f2c8841ad"},"source":["########################\n","\n","# PLOT TRAINING LOSS\n","loss = H.history['loss']\n","val_loss = H.history['val_loss']\n","\n","plt.figure()\n","plt.plot(H.epoch, loss, 'r', label='Training loss')\n","plt.plot(H.epoch, val_loss, 'bo', label='Validation loss')\n","plt.title('Training and Validation Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss Value')\n","plt.legend()\n","plt.show()\n","\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"1v6mX_QCpJlo"},"source":["## Evaluate Model\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NZ0L_AJ_85CV","executionInfo":{"status":"ok","timestamp":1621250287700,"user_tz":-330,"elapsed":1318,"user":{"displayName":"soniya singhal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiHK9orVGbsmNdyI5ADxiQAZQZ0U72EPVWs-RIt=s64","userId":"00658095523118481946"}},"outputId":"0b5edc12-761b-433d-9261-771c1d59a227"},"source":["### Test Set Predictions\n","print(\"Predictions...\")\n","labels = list(test.columns)\n","labels = labels[1:]\n","print(\"Labels:\", labels)\n","n = 6\n","for i in range(0, n):\n","    test_img = test_X[i * 10]\n","    test_gt_label = test_Y[i * 10]\n","    gt = []\n","    for lidx, label_id in enumerate(test_gt_label):\n","        if test_gt_label[lidx] == 1:\n","            gt.append(labels[lidx])\n","\n","    prob = model.predict(test_img.reshape(1, IMG_HEIGHT, IMG_WIDTH, 3))\n","    result = prob[0]\n","\n","    print(\"\\n--------Result:\")\n","    print(\"GT:\", gt)\n","    pred_labs = []\n","    for lidx, pb in enumerate(result):\n","        if pb >= 0.5:\n","            pred_labs.append(labels[lidx])\n","    print(\"Predicted labels:\", pred_labs)\n","    for i in range(NLABELS):\n","        print(\"{}\".format(labels[i])+\" ({:.3})\".format(prob[0, i]))\n","    # plt.imshow(test_img)\n","    # plt.axis(\"off\")\n","    # str_title = \"GT:\" + str(gt) + \" Predicted:\" + str(prediction)\n","    # plt.suptitle(str_title)\n","    # plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Predictions...\n","Labels: ['AbdomenCT', 'BreastMRI', 'ChestCT', 'Abnormal']\n","\n","--------Result:\n","GT: ['AbdomenCT']\n","Predicted labels: ['AbdomenCT']\n","AbdomenCT (0.997)\n","BreastMRI (0.00424)\n","ChestCT (0.00465)\n","Abnormal (0.0321)\n","\n","--------Result:\n","GT: ['BreastMRI']\n","Predicted labels: ['BreastMRI']\n","AbdomenCT (7.39e-07)\n","BreastMRI (0.998)\n","ChestCT (3.13e-06)\n","Abnormal (3.31e-05)\n","\n","--------Result:\n","GT: ['ChestCT']\n","Predicted labels: ['ChestCT']\n","AbdomenCT (0.000123)\n","BreastMRI (8.35e-10)\n","ChestCT (1.0)\n","Abnormal (0.104)\n","\n","--------Result:\n","GT: ['ChestCT']\n","Predicted labels: ['ChestCT', 'Abnormal']\n","AbdomenCT (0.00169)\n","BreastMRI (5.97e-09)\n","ChestCT (1.0)\n","Abnormal (0.64)\n","\n","--------Result:\n","GT: ['ChestCT', 'Abnormal']\n","Predicted labels: ['ChestCT', 'Abnormal']\n","AbdomenCT (0.00089)\n","BreastMRI (1.1e-08)\n","ChestCT (1.0)\n","Abnormal (0.701)\n","\n","--------Result:\n","GT: ['ChestCT', 'Abnormal']\n","Predicted labels: ['ChestCT', 'Abnormal']\n","AbdomenCT (0.000873)\n","BreastMRI (6.53e-08)\n","ChestCT (1.0)\n","Abnormal (0.573)\n"],"name":"stdout"}]}]}